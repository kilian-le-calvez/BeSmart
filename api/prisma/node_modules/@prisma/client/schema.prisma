// Datasource and generator definition
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

generator client {
  provider             = "prisma-client-js"
  referentialIntegrity = "foreignKeys"
  output               = "node_modules/@prisma/client" // Recommended default path
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  username     String         @unique
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Topic        Topic[]
  Thread       Thread[]
  Contribution Contribution[]
}

model Topic {
  id          String     @id @default(uuid())
  slug        String     @unique
  title       String
  description String
  tags        String[]
  createdById String?
  createdBy   User?      @relation(fields: [createdById], references: [id], onDelete: SetNull)
  threads     Thread[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  visibility  Visibility @default(PUBLIC)
}

model Thread {
  id             String         @id @default(uuid())
  title          String
  starterMessage String
  topicId        String
  topic          Topic          @relation(fields: [topicId], references: [id])
  createdById    String
  createdBy      User           @relation(fields: [createdById], references: [id])
  contributions  Contribution[]
  viewsCount     Int            @default(0)
  repliesCount   Int            @default(0)
  pinned         Boolean        @default(false)
  category       ThreadCategory @default(DISCUSSION)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Contribution {
  id                   String           @id @default(uuid())
  content              String
  threadId             String
  thread               Thread           @relation(fields: [threadId], references: [id])
  createdById          String
  createdBy            User             @relation(fields: [createdById], references: [id])
  parentContributionId String?
  parentContribution   Contribution?    @relation("ReplyTo", fields: [parentContributionId], references: [id])
  replies              Contribution[]   @relation("ReplyTo")
  likesCount           Int              @default(0)
  contributionType     ContributionType @default(STANDARD)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
}

enum Visibility {
  PUBLIC
  PRIVATE
  LIMITED
}

enum ThreadCategory {
  DISCUSSION
  CONTRIBUTION
  QUESTION
  SUGGESTION
}

enum ContributionType {
  STANDARD
  SUGGESTION
  CORRECTION
  RESOURCE
}
